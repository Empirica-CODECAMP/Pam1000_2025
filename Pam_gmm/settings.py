"""
Django settings for Pam_gmm project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-oddc(tfe-m)k^zgm3wpt*9j6a*4tt#p-qw0yy2)dijm@!5*2%m"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "unfold",
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "Cash_Flows",
    "rest_framework",
    "import_export",
    "Calculations",
    #'Organise',
    "Queries",
    "Acturial_Reports",
    "Fianancial_Statements",
    "Budget_ORSA",
    "Analytics",
    "users",
    "configuration",
    "plotly",
    "homepage",
    "Financial_Statements",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Pam_gmm.urls"

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Pam_gmm.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

import os

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


CELERY_BROKER_URL = "redis://localhost:6379/0"  # Adjust if using a different broker
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Example settings
# Settings for static files in Django

# Base URL to serve static files
STATIC_URL = "/static/"

# Absolute filesystem path to the directory where collectstatic will collect static files for deployment
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Make sure this path exists

# Additional locations of static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "homepage", "static"),  # Your app-level static files
    # os.path.join(BASE_DIR, "staticfiles"),  # Your app-level static files

]
# Whether to use app directories to find static files
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

DELETION_BATCH_SIZE = 5000

UNFOLD = {
    "SITE_HEADER": "Pam_gmm",
    "SITE_TITLE": "Pam_gmm",
    "SIDEBAR": {
        "show_search": True,  # Search in applications and models names
        "show_all_applications": True,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": _("Navigation"),
                "separator": True,  # Top border
                "collapsible": True,  # Collapsible group of links
                "items": [
                    {
                        "title": _("Authorization"),
                        "icon": "Fingerprint",  # Choose an icon from https://fonts.google.com/icons
                        "link": reverse_lazy(
                            "admin:app_list", kwargs={"app_label": "auth"}
                        ),  # Default app label for authentication and authorization
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                        # "badge": "sample_app.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Actuarial Reports"),
                        "icon": "Monitoring",  # You can change this to any icon name from https://fonts.google.com/icons
                        "link": reverse_lazy(
                            "admin:Acturial_Reports_actuarialreport_changelist"
                        ),  # Format: "admin:<app_label>_<model_name>_changelist"
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Analytics"),
                        "icon": "Analytics",  # Choose an icon from https://fonts.google.com/icons
                        "link": reverse_lazy(
                            "admin:app_list", kwargs={"app_label": "Analytics"}
                        ),  # Replace "analytics" with your app's actual label
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("GMM Configurations"),
                        "icon": "Analytics",  # Choose an icon from https://fonts.google.com/icons
                        "link": reverse_lazy(
                            "admin:app_list", kwargs={"app_label": "users"}
                        ),  # Replace "analytics" with your app's actual label
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Calculations"),
                        "icon": "Analytics",  # Choose an icon from https://fonts.google.com/icons
                        "link": reverse_lazy(
                            "admin:app_list", kwargs={"app_label": "Calculations"}
                        ),  # Replace "analytics" with your app's actual label
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
        ],
    },
}
